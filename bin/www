#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const app = require('../app');
const config = require('../config/settings.json');

//  Normalize a port into a number, string, or false.
const normalizePort = (val) => {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.node.port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', (err) => {
    if (err.syscall !== 'listen') {
        throw err;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (err.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1); // eslint-disable-line no-process-exit
            break; // eslint-disable-line no-unreachable
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1); // eslint-disable-line no-process-exit
            break; // eslint-disable-line no-unreachable
        default:
            throw err;
    }
});
server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    console.log(`Listening on ${bind}`);
});
